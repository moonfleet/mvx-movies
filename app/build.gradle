apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'kotlin-kapt'

def retrofitVersion = "2.5.0"
def daggerVersion = "2.21"

def groupId = "com.moonfleet.movies"
def artifactId = "movies"
def apkBaseName = artifactId

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId groupId
        minSdkVersion 23
        targetSdkVersion 28
        versionCode readVersionCode()
        versionName readVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.1.0-alpha09'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta2'
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-beta03'
    implementation 'androidx.palette:palette:1.0.0'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0-alpha03'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.2.0-alpha03'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.3.0-alpha02'
    implementation 'androidx.core:core-ktx:1.2.0-alpha03'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.jakewharton.rxbinding2:rxbinding-kotlin:2.2.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.github.castorflex.smoothprogressbar:library-circular:1.3.0'
    implementation 'com.afollestad.material-dialogs:core:3.1.0'

    implementation 'com.squareup.retrofit2:retrofit-mock:2.6.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.1'
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation ("com.google.dagger:dagger-android-support:$daggerVersion") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
        exclude module: 'support-media-compat'
        exclude module: 'support-compat'
    }
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.0'

    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.0-alpha01'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.0-alpha01'

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    testImplementation 'junit:junit:4.13-beta-3'
    testImplementation 'org.mockito:mockito-core:3.0.0'
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0-beta.5'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0-beta.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0-alpha02'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.3.0-alpha02') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
    }
    androidTestImplementation 'androidx.test.ext:junit:1.1.2-alpha02'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'org.mockito:mockito-android:3.0.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

def readVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
        // Do nothing
    } finally {
        if (stream != null) stream.close()
    }
    if (!version['major']) version['major'] = "0"
    if (!version['minor']) version['minor'] = "0"
    if (!version['patch']) version['patch'] = "0"
    return version
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}.${version['patch']}"
}

def readVersionCode() {
    def version = readVersion()
    def versionMajor = version['major'] as int
    def versionMinor = version['minor'] as int
    def versionPatch = version['patch'] as int
    return versionMajor * 1000000 + versionMinor  * 1000 + versionPatch
}
